/* eslint-disable */

/* swagger url: http://localhost:8888/developer/swagger-ui/index.html */
/* source: http://localhost:8888/developer/api-docs/ */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/chat": {
    get: {
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": {
                userId: string;
                chatId: string;
                slug: string;
              }[];
          };
        };
      };
    };
    post: {
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": {
              id: string;
              messages: {
                  id: string;
                  createdAtISO: string;
                  /** @enum {string} */
                  type: "message";
                  data: OneOf<[{
                    /** @enum {string} */
                    type: "bot";
                    message: string;
                  }, {
                    /** @enum {string} */
                    type: "user";
                    message: string;
                  }, {
                    /** @enum {string} */
                    type: "bot_append";
                    message: string;
                    parentMessageId: string;
                  }, {
                    /** @enum {string} */
                    type: "debug";
                    message: string;
                  }]>;
                }[];
            };
          };
        };
      };
    };
  };
  "/chat/{chatId}": {
    get: {
      parameters: {
        query?: {
          chatFromISO?: string | null;
        };
        path: {
          chatId: string;
        };
      };
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": OneOf<[{
                /** @enum {string} */
                type: "UNHANDLED_ERROR";
                data: unknown;
              }, {
                id: string;
                createdAtISO: string;
                /** @enum {string} */
                type: "message";
                data: OneOf<[{
                  /** @enum {string} */
                  type: "bot";
                  message: string;
                }, {
                  /** @enum {string} */
                  type: "user";
                  message: string;
                }, {
                  /** @enum {string} */
                  type: "bot_append";
                  message: string;
                  parentMessageId: string;
                }, {
                  /** @enum {string} */
                  type: "debug";
                  message: string;
                }]>;
              }]>[];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          chatId: string;
        };
      };
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": "OK";
          };
        };
      };
    };
  };
  "/chat/{chatId}/send-message": {
    post: {
      parameters: {
        path: {
          chatId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": OneOf<[{
                /** @enum {string} */
                type: "UNHANDLED_ERROR";
                data: unknown;
              }, {
                id: string;
                createdAtISO: string;
                /** @enum {string} */
                type: "message";
                data: OneOf<[{
                  /** @enum {string} */
                  type: "bot";
                  message: string;
                }, {
                  /** @enum {string} */
                  type: "user";
                  message: string;
                }, {
                  /** @enum {string} */
                  type: "bot_append";
                  message: string;
                  parentMessageId: string;
                }, {
                  /** @enum {string} */
                  type: "debug";
                  message: string;
                }]>;
              }]>[];
          };
        };
      };
    };
  };
  "/developer/swagger-ui/index.html": {
    get: {
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/developer/api-docs": {
    get: {
      responses: {
        /** @description 200 response */
        200: {
          content: {
            "application/json": {
              openapi: string;
              info: {
                version: string;
                title: string;
              };
              servers: {
                  url: string;
                }[];
              paths: {
                "/chat": {
                  get: {
                    parameters: unknown[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                              items: {
                                type: string;
                                required: string[];
                                properties: {
                                  userId: {
                                    type: string;
                                  };
                                  chatId: {
                                    type: string;
                                  };
                                  slug: {
                                    type: string;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                  post: {
                    parameters: unknown[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                              required: string[];
                              properties: {
                                id: {
                                  type: string;
                                };
                                messages: {
                                  type: string;
                                  items: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                      id: {
                                        type: string;
                                      };
                                      createdAtISO: {
                                        type: string;
                                      };
                                      type: {
                                        type: string;
                                        enum: string[];
                                      };
                                      data: {
                                        oneOf: {
                                            type: string;
                                            required: string[];
                                            properties: {
                                              type: {
                                                type: string;
                                                enum: string[];
                                              };
                                              message: {
                                                type: string;
                                              };
                                            };
                                          }[];
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                "/chat/{chatId}": {
                  delete: {
                    parameters: {
                        in: string;
                        name: string;
                        required: boolean;
                        schema: {
                          type: string;
                        };
                      }[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                              enum: string[];
                            };
                          };
                        };
                      };
                    };
                  };
                  get: {
                    parameters: {
                        in: string;
                        name: string;
                        required: boolean;
                        schema: {
                          type: string;
                        };
                      }[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                              items: {
                                oneOf: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                      type: {
                                        type: string;
                                        enum: string[];
                                      };
                                      data: Record<string, never>;
                                    };
                                  }[];
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                "/chat/{chatId}/send-message": {
                  post: {
                    parameters: {
                        in: string;
                        name: string;
                        required: boolean;
                        schema: {
                          type: string;
                        };
                      }[];
                    requestBody: {
                      required: boolean;
                      content: {
                        "application/json": {
                          schema: {
                            type: string;
                            required: string[];
                            properties: {
                              message: {
                                type: string;
                              };
                            };
                          };
                        };
                      };
                    };
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                              items: {
                                oneOf: {
                                    type: string;
                                    required: string[];
                                    properties: {
                                      type: {
                                        type: string;
                                        enum: string[];
                                      };
                                      data: Record<string, never>;
                                    };
                                  }[];
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                "/developer/swagger-ui/index.html": {
                  get: {
                    parameters: unknown[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: {
                              type: string;
                            };
                          };
                        };
                      };
                    };
                  };
                };
                "/developer/api-docs": {
                  get: {
                    parameters: unknown[];
                    responses: {
                      200: {
                        description: string;
                        content: {
                          "application/json": {
                            schema: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;

